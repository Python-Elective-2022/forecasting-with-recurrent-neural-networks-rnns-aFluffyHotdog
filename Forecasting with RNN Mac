{"cells":[{"cell_type":"markdown","id":"727eea74","metadata":{"id":"727eea74"},"source":["# Week 3: Using RNNs to predict time series\n","\n","Welcome! In the previous assignment you used a vanilla deep neural network to create forecasts for generated time series. This time you will be using Tensorflow's layers for processing sequence data such as Recurrent layers or LSTMs to see how these two approaches compare.\n","\n","Let's get started!"]},{"cell_type":"code","source":[],"metadata":{"id":"koIu8IVqpyh4"},"id":"koIu8IVqpyh4","execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":1,"id":"da902388","metadata":{"id":"da902388","executionInfo":{"status":"ok","timestamp":1675652238463,"user_tz":-420,"elapsed":4528,"user":{"displayName":"Thitiwut Pattanasuttinont","userId":"08829324740535031890"}}},"outputs":[],"source":["import tensorflow as tf\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from dataclasses import dataclass"]},{"cell_type":"markdown","id":"74720e74","metadata":{"id":"74720e74"},"source":["## Generating the data\n","\n","The next cell includes a bunch of helper functions to generate and plot the time series:"]},{"cell_type":"code","execution_count":2,"id":"b505c20e","metadata":{"id":"b505c20e","executionInfo":{"status":"ok","timestamp":1675652238464,"user_tz":-420,"elapsed":6,"user":{"displayName":"Thitiwut Pattanasuttinont","userId":"08829324740535031890"}}},"outputs":[],"source":["def plot_series(time, series, format=\"-\", start=0, end=None):\n","    plt.plot(time[start:end], series[start:end], format)\n","    plt.xlabel(\"Time\")\n","    plt.ylabel(\"Value\")\n","    plt.grid(False)\n","\n","def trend(time, slope=0):\n","    return slope * time\n","\n","def seasonal_pattern(season_time):\n","    \"\"\"Just an arbitrary pattern, you can change it if you wish\"\"\"\n","    return np.where(season_time < 0.1,\n","                    np.cos(season_time * 6 * np.pi),\n","                    2 / np.exp(9 * season_time))\n","\n","def seasonality(time, period, amplitude=1, phase=0):\n","    \"\"\"Repeats the same pattern at each period\"\"\"\n","    season_time = ((time + phase) % period) / period\n","    return amplitude * seasonal_pattern(season_time)\n","\n","def noise(time, noise_level=1, seed=None):\n","    rnd = np.random.RandomState(seed)\n","    return rnd.randn(len(time)) * noise_level"]},{"cell_type":"markdown","id":"f06d883a","metadata":{"id":"f06d883a"},"source":["You will be generating the same time series data as in last week's assignment.\n","\n","**Notice that this time all the generation is done within a function and global variables are saved within a dataclass. This is done to avoid using global scope as it was done in during the first week of the course.**\n","\n","If you haven't used dataclasses before, they are just Python classes that provide a convenient syntax for storing data. You can read more about them in the [docs](https://docs.python.org/3/library/dataclasses.html).\n","\n"]},{"cell_type":"code","execution_count":3,"id":"48aadcc3","metadata":{"id":"48aadcc3","colab":{"base_uri":"https://localhost:8080/","height":388},"executionInfo":{"status":"ok","timestamp":1675652243950,"user_tz":-420,"elapsed":1418,"user":{"displayName":"Thitiwut Pattanasuttinont","userId":"08829324740535031890"}},"outputId":"e23d5493-0442-481f-c686-ddf423705bad"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 720x432 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["def generate_time_series():\n","    # The time dimension or the x-coordinate of the time series\n","    time = np.arange(4 * 365 + 1, dtype=\"float32\")\n","\n","    # Initial series is just a straight line with a y-intercept\n","    y_intercept = 10\n","    slope = 0.005\n","    series = trend(time, slope) + y_intercept\n","\n","    # Adding seasonality\n","    amplitude = 50\n","    series += seasonality(time, period=365, amplitude=amplitude)\n","\n","    # Adding some noise\n","    noise_level = 3\n","    series += noise(time, noise_level, seed=51)\n","    \n","    return time, series\n","\n","\n","# Save all \"global\" variables within the G class (G stands for global)\n","@dataclass\n","class G:\n","    TIME, SERIES = generate_time_series()\n","    SPLIT_TIME = 1100\n","    WINDOW_SIZE = 20\n","    BATCH_SIZE = 32\n","    SHUFFLE_BUFFER_SIZE = 1000\n","    \n","\n","# Plot the generated series\n","plt.figure(figsize=(10, 6))\n","plot_series(G.TIME, G.SERIES)\n","plt.show()"]},{"cell_type":"markdown","id":"153e8341","metadata":{"id":"153e8341"},"source":["## Processing the data\n","\n","Since you already coded the `train_val_split` and `windowed_dataset` functions during past week's assignments, this time they are provided for you:\n","\n"]},{"cell_type":"code","execution_count":4,"id":"61d80b19","metadata":{"id":"61d80b19","executionInfo":{"status":"ok","timestamp":1675652247274,"user_tz":-420,"elapsed":5,"user":{"displayName":"Thitiwut Pattanasuttinont","userId":"08829324740535031890"}}},"outputs":[],"source":["def train_val_split(time, series, time_step=G.SPLIT_TIME):\n","\n","    time_train = time[:time_step]\n","    series_train = series[:time_step]\n","    time_valid = time[time_step:]\n","    series_valid = series[time_step:]\n","\n","    return time_train, series_train, time_valid, series_valid\n","\n","\n","# Split the dataset\n","time_train, series_train, time_valid, series_valid = train_val_split(G.TIME, G.SERIES)"]},{"cell_type":"code","execution_count":5,"id":"63d65bc2","metadata":{"id":"63d65bc2","executionInfo":{"status":"ok","timestamp":1675652251872,"user_tz":-420,"elapsed":811,"user":{"displayName":"Thitiwut Pattanasuttinont","userId":"08829324740535031890"}}},"outputs":[],"source":["def windowed_dataset(series, window_size=G.WINDOW_SIZE, batch_size=G.BATCH_SIZE, shuffle_buffer=G.SHUFFLE_BUFFER_SIZE):\n","    dataset = tf.data.Dataset.from_tensor_slices(series)\n","    dataset = dataset.window(window_size + 1, shift=1, drop_remainder=True)\n","    dataset = dataset.flat_map(lambda window: window.batch(window_size + 1))\n","    dataset = dataset.shuffle(shuffle_buffer)\n","    dataset = dataset.map(lambda window: (window[:-1], window[-1]))\n","    dataset = dataset.batch(batch_size).prefetch(1)\n","    return dataset\n","\n","# Apply the transformation to the training set\n","dataset = windowed_dataset(series_train)"]},{"cell_type":"markdown","id":"f13c3746","metadata":{"id":"f13c3746"},"source":["## Defining the model architecture\n","\n","Now that you have a function that will process the data before it is fed into your neural network for training, it is time to define you layer architecture. Unlike previous weeks or courses in which you define your layers and compile the model in the same function, here you will first need to complete the `create_uncompiled_model` function below. \n","\n","This is done so you can reuse your model's layers for the learning rate adjusting and the actual training.\n","\n","Hint:\n","- Fill in the `Lambda` layers at the beginning and end of the network with the correct lamda functions.\n","- You should use `SimpleRNN` or `Bidirectional(LSTM)` as intermediate layers.\n","- The last layer of the network (before the last `Lambda`) should be a `Dense` layer."]},{"cell_type":"code","execution_count":13,"id":"ded09736","metadata":{"id":"ded09736","executionInfo":{"status":"ok","timestamp":1675655849787,"user_tz":-420,"elapsed":5,"user":{"displayName":"Thitiwut Pattanasuttinont","userId":"08829324740535031890"}}},"outputs":[],"source":["def create_uncompiled_model():\n","\n","    ### START CODE HERE\n","    \n","    model = tf.keras.models.Sequential([ \n","        tf.keras.layers.Lambda(lambda x:tf.expand_dims(x,axis=-1), input_shape=[None]),\n","        tf.keras.layers.SimpleRNN(20, return_sequences=True),\n","        tf.keras.layers.SimpleRNN(20),\n","        tf.keras.layers.Dense(1),\n","        tf.keras.layers.Lambda(lambda x: x * 100.0)\n","    ]) \n","    \n","    ### END CODE HERE\n","\n","    return model"]},{"cell_type":"code","execution_count":14,"id":"df7f5667","metadata":{"id":"df7f5667","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1675655853535,"user_tz":-420,"elapsed":1582,"user":{"displayName":"Thitiwut Pattanasuttinont","userId":"08829324740535031890"}},"outputId":"74c6e0f5-0eb6-479f-b947-6d9f91956410"},"outputs":[{"output_type":"stream","name":"stdout","text":["34/34 [==============================] - 1s 5ms/step\n","Your current architecture is compatible with the windowed dataset! :)\n"]}],"source":["# Test your uncompiled model\n","uncompiled_model = create_uncompiled_model()\n","\n","try:\n","    uncompiled_model.predict(dataset)\n","except:\n","    print(\"Your current architecture is incompatible with the windowed dataset, try adjusting it.\")\n","else:\n","    print(\"Your current architecture is compatible with the windowed dataset! :)\")"]},{"cell_type":"markdown","id":"871fcb6b","metadata":{"id":"871fcb6b"},"source":["## Adjusting the learning rate - (Optional Exercise)\n","\n","As you saw in the lecture you can leverage Tensorflow's callbacks to dinamically vary the learning rate during training. This can be helpful to get a better sense of which learning rate better acommodates to the problem at hand.\n","\n","**Notice that this is only changing the learning rate during the training process to give you an idea of what a reasonable learning rate is and should not be confused with selecting the best learning rate, this is known as hyperparameter optimization and it is outside the scope of this course.**\n","\n","For the optimizers you can try out:\n","- [`tf.keras.optimizers.Adam`](https://www.tensorflow.org/api_docs/python/tf/keras/optimizers/Adam)\n","- [`tf.keras.optimizers.SGD`](https://www.tensorflow.org/api_docs/python/tf/keras/optimizers/SGD) with a momentum of 0.9"]},{"cell_type":"code","execution_count":null,"id":"4b8878d5","metadata":{"id":"4b8878d5"},"outputs":[],"source":["def adjust_learning_rate():\n","    \n","    model = create_uncompiled_model()\n","    \n","    lr_schedule = tf.keras.callbacks.LearningRateScheduler(lambda epoch: 1e-6 * 10**(epoch / 20))\n","    \n","    ### START CODE HERE\n","    \n","    # Select your optimizer\n","    optimizer = None\n","    \n","    # Compile the model passing in the appropriate loss\n","    model.compile(loss=None,\n","                  optimizer=optimizer, \n","                  metrics=[\"mae\"]) \n","    \n","    ### END CODE HERE\n","    \n","    history = model.fit(dataset, epochs=100, callbacks=[lr_schedule])\n","    \n","    return history"]},{"cell_type":"code","execution_count":null,"id":"1f0550ca","metadata":{"id":"1f0550ca"},"outputs":[],"source":["# Run the training with dynamic LR\n","lr_history = adjust_learning_rate()"]},{"cell_type":"code","execution_count":null,"id":"d1977dae","metadata":{"id":"d1977dae"},"outputs":[],"source":["# Plot the loss for every LR\n","plt.semilogx(lr_history.history[\"lr\"], lr_history.history[\"loss\"])\n","plt.axis([1e-6, 1, 0, 30])"]},{"cell_type":"markdown","id":"1971fd3a","metadata":{"id":"1971fd3a"},"source":["## Compiling the model\n","\n","Now that you have trained the model while varying the learning rate, it is time to do the actual training that will be used to forecast the time series. For this complete the `create_model` function below.\n","\n","Notice that you are reusing the architecture you defined in the `create_uncompiled_model` earlier. Now you only need to compile this model using the appropriate loss, optimizer (and learning rate).\n","\n","Hint:\n","- The training should be really quick so if you notice that each epoch is taking more than a few seconds, consider trying a different architecture.\n","\n","\n","- If after the first epoch you get an output like this: `loss: nan - mae: nan` it is very likely that your network is suffering from exploding gradients. This is a common problem if you used `SGD` as optimizer and set a learning rate that is too high. **If you encounter this problem consider lowering the learning rate or using Adam with the default learning rate.**"]},{"cell_type":"code","execution_count":18,"id":"8766c169","metadata":{"id":"8766c169","executionInfo":{"status":"ok","timestamp":1675656092068,"user_tz":-420,"elapsed":367,"user":{"displayName":"Thitiwut Pattanasuttinont","userId":"08829324740535031890"}}},"outputs":[],"source":["def create_model():\n","\n","    tf.random.set_seed(51)\n","    \n","    model = create_uncompiled_model()\n","\n","    ### START CODE HERE\n","    optimizer = tf.keras.optimizers.SGD(learning_rate=5e-6, momentum = 0.9)\n","    model.compile(loss=tf.keras.losses.Huber(),\n","                  optimizer=optimizer,\n","                  metrics=[\"mae\"])  \n","    \n","    ### END CODE HERE\n","\n","    return model"]},{"cell_type":"code","execution_count":19,"id":"8cf3bc51","metadata":{"id":"8cf3bc51","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1675656124692,"user_tz":-420,"elapsed":31113,"user":{"displayName":"Thitiwut Pattanasuttinont","userId":"08829324740535031890"}},"outputId":"dae549ac-b17b-46d1-cf18-fa72530be625"},"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/50\n","34/34 [==============================] - 2s 9ms/step - loss: 28.0238 - mae: 28.5183\n","Epoch 2/50\n","34/34 [==============================] - 0s 9ms/step - loss: 6.6962 - mae: 7.1783\n","Epoch 3/50\n","34/34 [==============================] - 0s 9ms/step - loss: 5.4940 - mae: 5.9672\n","Epoch 4/50\n","34/34 [==============================] - 0s 9ms/step - loss: 4.9039 - mae: 5.3760\n","Epoch 5/50\n","34/34 [==============================] - 1s 14ms/step - loss: 4.4936 - mae: 4.9630\n","Epoch 6/50\n","34/34 [==============================] - 1s 14ms/step - loss: 4.3082 - mae: 4.7840\n","Epoch 7/50\n","34/34 [==============================] - 1s 14ms/step - loss: 4.0792 - mae: 4.5524\n","Epoch 8/50\n","34/34 [==============================] - 0s 10ms/step - loss: 3.9928 - mae: 4.4663\n","Epoch 9/50\n","34/34 [==============================] - 0s 9ms/step - loss: 3.9696 - mae: 4.4398\n","Epoch 10/50\n","34/34 [==============================] - 1s 20ms/step - loss: 3.9291 - mae: 4.4022\n","Epoch 11/50\n","34/34 [==============================] - 0s 9ms/step - loss: 3.7203 - mae: 4.1876\n","Epoch 12/50\n","34/34 [==============================] - 0s 9ms/step - loss: 3.5439 - mae: 4.0086\n","Epoch 13/50\n","34/34 [==============================] - 0s 9ms/step - loss: 3.8641 - mae: 4.3375\n","Epoch 14/50\n","34/34 [==============================] - 0s 10ms/step - loss: 3.4727 - mae: 3.9357\n","Epoch 15/50\n","34/34 [==============================] - 0s 9ms/step - loss: 3.5031 - mae: 3.9725\n","Epoch 16/50\n","34/34 [==============================] - 0s 10ms/step - loss: 3.3862 - mae: 3.8515\n","Epoch 17/50\n","34/34 [==============================] - 0s 9ms/step - loss: 3.2798 - mae: 3.7437\n","Epoch 18/50\n","34/34 [==============================] - 0s 9ms/step - loss: 3.3917 - mae: 3.8598\n","Epoch 19/50\n","34/34 [==============================] - 0s 9ms/step - loss: 3.5313 - mae: 4.0053\n","Epoch 20/50\n","34/34 [==============================] - 0s 9ms/step - loss: 3.2358 - mae: 3.6991\n","Epoch 21/50\n","34/34 [==============================] - 0s 9ms/step - loss: 3.3727 - mae: 3.8364\n","Epoch 22/50\n","34/34 [==============================] - 0s 9ms/step - loss: 3.3313 - mae: 3.7994\n","Epoch 23/50\n","34/34 [==============================] - 0s 9ms/step - loss: 3.2213 - mae: 3.6860\n","Epoch 24/50\n","34/34 [==============================] - 0s 10ms/step - loss: 3.2442 - mae: 3.7092\n","Epoch 25/50\n","34/34 [==============================] - 0s 9ms/step - loss: 3.1920 - mae: 3.6567\n","Epoch 26/50\n","34/34 [==============================] - 0s 10ms/step - loss: 3.2380 - mae: 3.6987\n","Epoch 27/50\n","34/34 [==============================] - 0s 9ms/step - loss: 3.3585 - mae: 3.8294\n","Epoch 28/50\n","34/34 [==============================] - 0s 9ms/step - loss: 3.1347 - mae: 3.6037\n","Epoch 29/50\n","34/34 [==============================] - 0s 9ms/step - loss: 3.1920 - mae: 3.6549\n","Epoch 30/50\n","34/34 [==============================] - 0s 9ms/step - loss: 3.2148 - mae: 3.6814\n","Epoch 31/50\n","34/34 [==============================] - 0s 9ms/step - loss: 3.3477 - mae: 3.8147\n","Epoch 32/50\n","34/34 [==============================] - 0s 9ms/step - loss: 3.2479 - mae: 3.7178\n","Epoch 33/50\n","34/34 [==============================] - 0s 9ms/step - loss: 3.2207 - mae: 3.6866\n","Epoch 34/50\n","34/34 [==============================] - 0s 9ms/step - loss: 3.4566 - mae: 3.9295\n","Epoch 35/50\n","34/34 [==============================] - 0s 10ms/step - loss: 3.1857 - mae: 3.6501\n","Epoch 36/50\n","34/34 [==============================] - 0s 8ms/step - loss: 3.5035 - mae: 3.9751\n","Epoch 37/50\n","34/34 [==============================] - 0s 9ms/step - loss: 3.5914 - mae: 4.0675\n","Epoch 38/50\n","34/34 [==============================] - 0s 9ms/step - loss: 3.1305 - mae: 3.5961\n","Epoch 39/50\n","34/34 [==============================] - 0s 10ms/step - loss: 3.1696 - mae: 3.6297\n","Epoch 40/50\n","34/34 [==============================] - 0s 9ms/step - loss: 3.2657 - mae: 3.7285\n","Epoch 41/50\n","34/34 [==============================] - 0s 9ms/step - loss: 3.1124 - mae: 3.5781\n","Epoch 42/50\n","34/34 [==============================] - 0s 9ms/step - loss: 3.0486 - mae: 3.5115\n","Epoch 43/50\n","34/34 [==============================] - 0s 9ms/step - loss: 3.1481 - mae: 3.6137\n","Epoch 44/50\n","34/34 [==============================] - 0s 9ms/step - loss: 3.3039 - mae: 3.7702\n","Epoch 45/50\n","34/34 [==============================] - 0s 9ms/step - loss: 3.0322 - mae: 3.4923\n","Epoch 46/50\n","34/34 [==============================] - 0s 9ms/step - loss: 3.0701 - mae: 3.5334\n","Epoch 48/50\n","34/34 [==============================] - 0s 9ms/step - loss: 3.1934 - mae: 3.6616\n","Epoch 49/50\n","34/34 [==============================] - 0s 9ms/step - loss: 3.5860 - mae: 4.0564\n","Epoch 50/50\n","34/34 [==============================] - 0s 9ms/step - loss: 3.2704 - mae: 3.7363\n"]}],"source":["# Save an instance of the model\n","model = create_model()\n","\n","# Train it\n","history = model.fit(dataset, epochs=50)"]},{"cell_type":"markdown","id":"96aeabb6","metadata":{"id":"96aeabb6"},"source":["## Evaluating the forecast\n","\n","Now it is time to evaluate the performance of the forecast. For this you can use the `compute_metrics` function that you coded in a previous assignment:"]},{"cell_type":"code","execution_count":20,"id":"58db2a59","metadata":{"id":"58db2a59","executionInfo":{"status":"ok","timestamp":1675656129142,"user_tz":-420,"elapsed":6,"user":{"displayName":"Thitiwut Pattanasuttinont","userId":"08829324740535031890"}}},"outputs":[],"source":["def compute_metrics(true_series, forecast):\n","    \n","    mse = tf.keras.metrics.mean_squared_error(true_series, forecast).numpy()\n","    mae = tf.keras.metrics.mean_absolute_error(true_series, forecast).numpy()\n","\n","    return mse, mae"]},{"cell_type":"markdown","id":"5aa1e989","metadata":{"id":"5aa1e989"},"source":["At this point only the model that will perform the forecast is ready but you still need to compute the actual forecast. \n","\n","## Faster model forecasts\n","\n","In the previous week you used a for loop to compute the forecasts for every point in the sequence. This approach is valid but there is a more efficient way of doing the same thing by using batches of data. The code to implement this is provided in the `model_forecast` below. Notice that the code is very similar to the one in the `windowed_dataset` function with the differences that:\n","\n","- The dataset is windowed using `window_size` rather than `window_size + 1`\n","- No shuffle should be used\n","- No need to split the data into features and labels\n","- A model is used to predict batches of the dataset"]},{"cell_type":"code","execution_count":21,"id":"acknowledged-penny","metadata":{"id":"acknowledged-penny","executionInfo":{"status":"ok","timestamp":1675656134199,"user_tz":-420,"elapsed":1404,"user":{"displayName":"Thitiwut Pattanasuttinont","userId":"08829324740535031890"}}},"outputs":[],"source":["def model_forecast(model, series, window_size):\n","    ds = tf.data.Dataset.from_tensor_slices(series)\n","    ds = ds.window(window_size, shift=1, drop_remainder=True)\n","    ds = ds.flat_map(lambda w: w.batch(window_size))\n","    ds = ds.batch(32).prefetch(1)\n","    forecast = model.predict(ds)\n","    return forecast"]},{"cell_type":"code","execution_count":22,"id":"neural-assurance","metadata":{"id":"neural-assurance","colab":{"base_uri":"https://localhost:8080/","height":406},"executionInfo":{"status":"ok","timestamp":1675656139122,"user_tz":-420,"elapsed":1799,"user":{"displayName":"Thitiwut Pattanasuttinont","userId":"08829324740535031890"}},"outputId":"4bc091ad-b127-4bc2-c7aa-6e136ac360e7"},"outputs":[{"output_type":"stream","name":"stdout","text":["46/46 [==============================] - 1s 6ms/step\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 720x432 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}],"source":["# Compute the forecast for all the series\n","rnn_forecast = model_forecast(model, G.SERIES, G.WINDOW_SIZE).squeeze()\n","\n","# Slice the forecast to get only the predictions for the validation set\n","rnn_forecast = rnn_forecast[G.SPLIT_TIME - G.WINDOW_SIZE:-1]\n","\n","# Plot it\n","plt.figure(figsize=(10, 6))\n","\n","plot_series(time_valid, series_valid)\n","plot_series(time_valid, rnn_forecast)"]},{"cell_type":"markdown","id":"e212c8a9","metadata":{"id":"e212c8a9"},"source":["**Expected Output:**\n","\n","A series similar to this one:\n","\n","<div>\n","<img src=\"https://github.com/https-deeplearning-ai/tensorflow-1-public/blob/main/C4/W3/assignment/images/expected.png?raw=1\" width=\"500\"/>\n","</div>"]},{"cell_type":"code","execution_count":23,"id":"c951006f","metadata":{"id":"c951006f","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1675656149871,"user_tz":-420,"elapsed":410,"user":{"displayName":"Thitiwut Pattanasuttinont","userId":"08829324740535031890"}},"outputId":"bf182027-da72-42bc-dc3e-f923dd8549fc"},"outputs":[{"output_type":"stream","name":"stdout","text":["mse: 30.00, mae: 3.41 for forecast\n"]}],"source":["mse, mae = compute_metrics(series_valid, rnn_forecast)\n","\n","print(f\"mse: {mse:.2f}, mae: {mae:.2f} for forecast\")"]},{"cell_type":"markdown","id":"66d1d7cd","metadata":{"id":"66d1d7cd"},"source":["**To pass this assignment your forecast should achieve an MAE of 4.5 or less.**\n","\n","- If your forecast didn't achieve this threshold try re-training your model with a different architecture (you will need to re-run both `create_uncompiled_model` and `create_model` functions) or tweaking the optimizer's parameters.\n","\n","\n","- If your forecast did achieve this threshold run the following cell to save your model in a `tar` file which will be used for grading and after doing so, submit your assigment for grading.\n","\n","\n","- This environment includes a dummy `SavedModel` directory which contains a dummy model trained for one epoch. **To replace this file with your actual model you need to run the next cell before submitting for grading.**\n","\n","\n","- Unlike last week, this time the model is saved using the `SavedModel` format. This is done because the HDF5 format does not fully support `Lambda` layers."]},{"cell_type":"code","execution_count":24,"id":"c243363b","metadata":{"id":"c243363b","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1675656161036,"user_tz":-420,"elapsed":3388,"user":{"displayName":"Thitiwut Pattanasuttinont","userId":"08829324740535031890"}},"outputId":"308097e9-827c-4bb5-a2bc-f497400de890"},"outputs":[{"output_type":"stream","name":"stdout","text":["saved_model/\n","saved_model/my_model/\n","saved_model/my_model/assets/\n","saved_model/my_model/saved_model.pb\n","saved_model/my_model/variables/\n","saved_model/my_model/variables/variables.index\n","saved_model/my_model/variables/variables.data-00000-of-00001\n","saved_model/my_model/keras_metadata.pb\n"]}],"source":["# Save your model in the SavedModel format\n","model.save('saved_model/my_model')\n","\n","# Compress the directory using tar\n","! tar -czvf saved_model.tar.gz saved_model/"]},{"cell_type":"markdown","id":"6afab213","metadata":{"id":"6afab213"},"source":["**Congratulations on finishing this week's assignment!**\n","\n","You have successfully implemented a neural network capable of forecasting time series leveraging Tensorflow's layers for sequence modelling such as `RNNs` and `LSTMs`! **This resulted in a forecast that matches (or even surpasses) the one from last week while training for half of the epochs.**\n","\n","**Keep it up!**"]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.8"},"colab":{"provenance":[{"file_id":"https://github.com/https-deeplearning-ai/tensorflow-1-public/blob/main/C4/W3/assignment/C4W3_Assignment.ipynb","timestamp":1675652183890}]},"gpuClass":"standard"},"nbformat":4,"nbformat_minor":5}